merge(seednums, by.x = c("Season" ,"WTeamID") , by.y = c("Season", "TeamID")) %>%
merge(seednums, by.x = c("Season" ,"LTeamID") , by.y = c("Season", "TeamID"))
tourney_results <- tourney_results %>%
merge(team_names[1:2] , by.x = "WTeamID" , by.y = "TeamID") %>%
merge(team_names[1:2], by.x = "LTeamID" , by.y = "TeamID")
upsets <- tourney_results %>%
filter(Seed.x - Seed.y > 4 )
tourney_results$matchup <- paste(tourney_results$TeamName.x," Vs. ",tourney_results$TeamName.y)
tourney_results$seed_matchup <- ifelse(tourney_results$Seed.x < tourney_results$Seed.y,
paste(tourney_results$Seed.x," Vs. ",tourney_results$Seed.y),
paste(tourney_results$Seed.y," Vs. ",tourney_results$Seed.x)
)
tourney_results$is_upset <- ifelse(tourney_results$Seed.x - tourney_results$Seed.y > 0 , "Upset result" , "Expected result")
tourney_results$game_id <- nrow(rs_results) + seq.int(nrow(tourney_results))
tourney_results$score_delta <- tourney_results$WScore - tourney_results$LScore
tourney_win <- tourney_results[,c(3,2,5,9:21,35,37,39,40,41,42,43)]
tourney_loss <- tourney_results[,c(3,1,6,22:34,36,38,39,40,41,42,43)]
tourney_win["Status"] = "win"
tourney_loss["Status"] = "Loss"
colnames(tourney_win) <- c("Season"  , "TeamID" , "Score" , "FGM" , "FGA" , "FGM3" , "FGA3" , "FTM" , "FTA" , "OR" , "DR" , "Ast" , "TO" , "Stl" , "Blk ","PF"  , "Seed","team name","Matchup" ,  "Seed Matchup", "is_upset","game_id","score_delta" ,"outcome")
colnames(tourney_loss) <- c("Season" , "TeamID"  , "Score" , "FGM" , "FGA" , "FGM3" , "FGA3" , "FTM" , "FTA" , "OR" , "DR" , "Ast" , "TO" , "Stl" , "Blk ","PF" , "Seed","team name","Matchup", "Seed Matchup", "is_upset" ,"game_id","score_delta" ,"outcome")
tourney_data <- rbind(tourney_win , tourney_loss)
tourney_data$game_type <- "NCAA Tournament"
tourney_data <- rbind.fill(tourney_data , reg_season)
rm(seednums , team_names , tourney_loss  ,upsets, conference_names , conferences )
tourney_data$strong_seed <- substr(tourney_data$`Seed Matchup`,1,2)
tourney_data$weak_seed <- substr(tourney_data$`Seed Matchup`,8,11)
tourney_data$strong_seed <- as.numeric(tourney_data$strong_seed)
tourney_data$weak_seed <- as.numeric(tourney_data$weak_seed)
tourney_data$game_exp <- paste(tourney_data$is_upset ,tourney_data$game_type)
write.csv(tourney_data, "tourney_data.csv")
View(tourney_results)
rs_results <- read.csv("MregularSeasonDetailedResults.csv")
seednums <-read.csv("tourney_seednums.csv")
team_names <- read.csv("Mteams.csv")
rs_results <- rs_results %>%
merge(seednums, by.x = c("Season" ,"WTeamID") , by.y = c("Season", "TeamID")) %>%
merge(seednums, by.x = c("Season" ,"LTeamID") , by.y = c("Season", "TeamID"))
rs_results$seed_matchup <- ifelse(rs_results$Seed.x < rs_results$Seed.y,
paste(rs_results$Seed.x," Vs. ",rs_results$Seed.y),
paste(rs_results$Seed.y," Vs. ",rs_results$Seed.x))
rs_results <- rs_results %>%
merge(team_names[1:2] , by.x = "WTeamID" , by.y = "TeamID") %>%
merge(team_names[1:2], by.x = "LTeamID" , by.y = "TeamID")
rs_results$matchup <- paste(rs_results$TeamName.x," Vs. ",rs_results$TeamName.y)
rs_results$seed_matchup <- ifelse(rs_results$Seed.x < rs_results$Seed.y,
paste(rs_results$Seed.x," Vs. ",rs_results$Seed.y),
paste(rs_results$Seed.y," Vs. ",rs_results$Seed.x))
rs_results$is_upset <- ifelse(rs_results$Seed.x - rs_results$Seed.y > 0 , "Upset result" , "Expected result")
rs_results$game_id <- seq.int(nrow(rs_results))
rs_results$score_delta <- rs_results$WScore - rs_results$LScore
rs_win <- rs_results[,c(3,2,5,9:21,35,37,38,40,41,42,43)]
rs_loss <- rs_results[,c(3,1,6,22:34,36,37,39,40,41,42,43)]
rs_win["Status"] = "win"
rs_loss["Status"] = "Loss"
colnames(rs_win) <- c("Season"  , "TeamID" , "Score" , "FGM" , "FGA" , "FGM3" , "FGA3" , "FTM" , "FTA" , "OR" , "DR" , "Ast" , "TO" , "Stl" , "Blk ","PF" , "Seed", "Seed Matchup" ,  "team name" ,"Matchup","is_upset","game_id" , "score_delta" , "outcome" )
colnames(rs_loss) <- c("Season" , "TeamID" , "Score" , "FGM" , "FGA" , "FGM3" , "FGA3" , "FTM" , "FTA" , "OR" , "DR" , "Ast" , "TO" , "Stl" , "Blk ","PF" , "Seed",
"Seed Matchup" ,  "team name" ,"Matchup","is_upset","game_id" ,"score_delta" ,"outcome")
reg_season <- rbind(rs_win , rs_loss)
reg_season$game_type <- "Regular Season"
rm(rs_loss , seednums , team_names)
seednums <- read.csv("tourney_seednums.csv")
tourney_results <- read.csv("MNCAATourneyDetailedResults.csv")
team_names <- read.csv("Mteams.csv")
conferences <- read.csv("MTeamConferences.csv")
conference_names <- read.csv("Conferences.csv")
tourney_results <- tourney_results %>%
merge(seednums, by.x = c("Season" ,"WTeamID") , by.y = c("Season", "TeamID")) %>%
merge(seednums, by.x = c("Season" ,"LTeamID") , by.y = c("Season", "TeamID"))
tourney_results <- tourney_results %>%
merge(team_names[1:2] , by.x = "WTeamID" , by.y = "TeamID") %>%
merge(team_names[1:2], by.x = "LTeamID" , by.y = "TeamID")
upsets <- tourney_results %>%
filter(Seed.x - Seed.y > 4 )
tourney_results$matchup <- paste(tourney_results$TeamName.x," Vs. ",tourney_results$TeamName.y)
tourney_results$seed_matchup <- ifelse(tourney_results$Seed.x < tourney_results$Seed.y,
paste(tourney_results$Seed.x," Vs. ",tourney_results$Seed.y),
paste(tourney_results$Seed.y," Vs. ",tourney_results$Seed.x)
)
tourney_results$is_upset <- ifelse(tourney_results$Seed.x - tourney_results$Seed.y > 0 , "Upset result" , "Expected result")
tourney_results$game_id <- nrow(rs_results) + seq.int(nrow(tourney_results))
tourney_results$score_delta <- tourney_results$WScore - tourney_results$LScore
tourney_win <- tourney_results[,c(3,2,5,9:21,35,37,39,40,41,42,43)]
tourney_loss <- tourney_results[,c(3,1,6,22:34,36,38,39,40,41,42,43)]
tourney_win["Status"] = "win"
tourney_loss["Status"] = "Loss"
colnames(tourney_win) <- c("Season"  , "TeamID" , "Score" , "FGM" , "FGA" , "FGM3" , "FGA3" , "FTM" , "FTA" , "OR" , "DR" , "Ast" , "TO" , "Stl" , "Blk ","PF"  , "Seed","team name","Matchup" ,  "Seed Matchup", "is_upset","game_id","score_delta" ,"outcome")
colnames(tourney_loss) <- c("Season" , "TeamID"  , "Score" , "FGM" , "FGA" , "FGM3" , "FGA3" , "FTM" , "FTA" , "OR" , "DR" , "Ast" , "TO" , "Stl" , "Blk ","PF" , "Seed","team name","Matchup", "Seed Matchup", "is_upset" ,"game_id","score_delta" ,"outcome")
tourney_data <- rbind(tourney_win , tourney_loss)
tourney_data$game_type <- "NCAA Tournament"
tourney_data <- rbind.fill(tourney_data , reg_season)
rm(seednums , team_names , tourney_loss  ,upsets, conference_names , conferences )
tourney_data$strong_seed <- substr(tourney_data$`Seed Matchup`,1,2)
tourney_data$weak_seed <- substr(tourney_data$`Seed Matchup`,8,11)
tourney_data$strong_seed <- as.numeric(tourney_data$strong_seed)
tourney_data$weak_seed <- as.numeric(tourney_data$weak_seed)
tourney_data$game_exp <- paste(tourney_data$is_upset ,tourney_data$game_type)
write.csv(tourney_data, "tourney_data.csv")
.libpaths()
setwd("C:/Uni files/FIT3179/FIT3179")
fast_food <- read.csv("Fast_Food_Restaurants_US.csv")
fast_food <- read.csv("Fast_Food_Restaurants_US.csv")
View(fast_food)
fast_food %>%
group_by(province) %>%
summary()
library(dplyr)
fast_food <- read.csv("Fast_Food_Restaurants_US.csv")
fast_food %>%
group_by(province) %>%
summary()
fast_food %>%
group_by(province) %>%
group_by(name) %>%
count()
fast_food %>%
group_by(province,name) %>%
count()
by_province <- fast_food %>%
group_by(province,name) %>%
count()
View(by_province)
by_province <- fast_food %>%
group_by(province,name) %>%
count() %>%
filter(max())
by_province <- fast_food %>%
group_by(province,name) %>%
summarise(Value = max(Value))
by_province <- fast_food %>%
group_by(province,name) %>%
summarise(Value = max(count()))
by_province <- fast_food %>%
group_by(province,name) %>%
count()
View(by_province)
by_province <- fast_food %>%
group_by(province,name) %>%
max(count())
by_province <- fast_food %>%
group_by(province,name) %>%
count()
View(by_province)
by_province %>%
summarise(max)
by_province %>%
summarise(province,max)
by_province %>%
summarise(n,province,max)
by_province %>%
group_by(province) %>%
summarise(max(n))
by_province %>%
group_by(province) %>%
summarise(name,max(n))
by_province %>%
group_by(province) %>%
summarise(max(n))
by_province %>%
summarise(max(n))
by_province %>%
group_by(province)%>%
filter(n == max(n))
state_max <- by_province %>%
group_by(province)%>%
filter(n == max(n))
View(state_max)
View(fast_food)
knitr::opts_chunk$set(echo = TRUE)
ores<- read.csv("ores_short.csv")
View(ores)
ores<- read.csv("mineral-ores.csv")
ores<- read.csv("mineral-ores.csv")
library(dplyr)
ores_split <-ores %>%
mutate(commod1 = strsplit(as.character(commod1),",")) %>%
unnest(commod1)
library(dplyr)
library(tidyr)
ores_split <-ores %>%
mutate(commod1 = strsplit(as.character(commod1),",")) %>%
unnest(commod1)
View(ores_split)
by_province <- ores_split %>%
group_by(state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
View(by_province)
by_province <- ores_split %>%
group_by(country,state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
View(by_province)
by_country <- ores_split %>%
group_by(country,commod1) %>%
count()
View(by_country)
by_province <- ores_split %>%
group_by(country,state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
by_country <- ores_split %>%
group_by(country,commod1) %>%
count()
by_country <- by_country %>%
group_by(country) %>%
filter(n == max(n))
View(state_max)
View(by_country)
ores<- read.csv("mineral-ores.csv")
ores <- ores %>%
filter(country == "United States")
ores<- read.csv("mineral-ores.csv")
ores <- ores %>%
filter(country == "United States")
ores_split <-ores %>%
mutate(commod1 = strsplit(as.character(commod1),",")) %>%
unnest(commod1)
by_province <- ores_split %>%
group_by(country,state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
View(state_max)
View(ores_split)
View(state_max)
ores<- read.csv("mineral-ores.csv")
ores <- ores %>%
filter(country == "United States")
ores <-ores %>%
mutate(commod1 = strsplit(as.character(commod1),",")) %>%
unnest(commod1)
ores <- ores %>%
mutate(state = strsplit(as.character(state),",")) %>%
unnest(state)
ores<- read.csv("mineral-ores.csv")
ores <- ores %>%
filter(country == "United States")
ores <-ores %>%
mutate(commod1 = strsplit(as.character(commod1),",")) %>%
unnest(commod1)
ores <- ores %>%
mutate(state = strsplit(as.character(state),",")) %>%
unnest(state)
by_province <- ores_split %>%
group_by(country,state,commod1) %>%
count()
by_province <- ores %>%
group_by(state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
View(state_max)
View(state_max)
state_max %>%
group_by(state)
by_province <- ores %>%
group_by(state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
View(state_max)
View(ores)
View(by_province)
View(ores)
ores<- read.csv("mineral-ores.csv")
ores <- ores %>%
filter(country == "United States")
ores <-ores %>%
mutate(commod1 = strsplit(as.character(commod1),",")) %>%
unnest(commod1)
ores <- ores %>%
mutate(state = strsplit(as.character(state),",")) %>%
unnest(state)
ores <- ores %>%
mutate(state = str_squish(state))
ores<- read.csv("mineral-ores.csv")
ores <- ores %>%
filter(country == "United States")
ores <-ores %>%
mutate(commod1 = strsplit(as.character(commod1),",")) %>%
unnest(commod1)
ores <- ores %>%
mutate(state = strsplit(as.character(state),",")) %>%
unnest(state)
ores <- ores %>%
mutate(state = str_trim(state))
library(dplyr)
library(tidyr)
library(stringr)
ores<- read.csv("mineral-ores.csv")
ores <- ores %>%
filter(country == "United States")
ores <-ores %>%
mutate(commod1 = strsplit(as.character(commod1),",")) %>%
unnest(commod1)
ores <- ores %>%
mutate(state = strsplit(as.character(state),",")) %>%
unnest(state)
ores <- ores %>%
mutate(state = str_trim(state))
by_province <- ores %>%
group_by(state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
View(state_max)
ores<- read.csv("mineral-ores.csv")
ores <- ores %>%
filter(country == "United States")
ores <-ores %>%
mutate(commod1 = strsplit(as.character(commod1),",")) %>%
unnest(commod1)
ores <- ores %>%
mutate(state = strsplit(as.character(state),",")) %>%
unnest(state)
ores <- ores %>%
mutate(state = str_trim(state))
ores <- ores %>%
filter(commod1 != " Construction")
ores<- read.csv("mineral-ores.csv")
ores <- ores %>%
filter(country == "United States")
ores <-ores %>%
mutate(commod1 = strsplit(as.character(commod1),",")) %>%
unnest(commod1)
ores <- ores %>%
mutate(state = strsplit(as.character(state),",")) %>%
unnest(state)
ores <- ores %>%
mutate(state = str_trim(state))
ores <- ores %>%
mutate(commod1 = str_trim(commod1)) %>%
filter(commod1 != "Construction")
by_province <- ores %>%
group_by(state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
View(state_max)
View(state_max)
View(by_province)
ores<- read.csv("mineral-ores.csv")
ores <- ores %>%
filter(country == "United States")
ores <- ores %>%
filter(com_type == "M")
ores <-ores %>%
mutate(commod1 = strsplit(as.character(commod1),",")) %>%
unnest(commod1)
ores <- ores %>%
mutate(state = strsplit(as.character(state),",")) %>%
unnest(state)
ores <- ores %>%
mutate(state = str_trim(state))
ores <- ores %>%
mutate(commod1 = str_trim(commod1)) %>%
filter(commod1 != "Construction")
by_province <- ores %>%
group_by(state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
View(by_province)
View(by_province)
state_max %>%
group_by(state)
write.csv(by_province,"province_bar.csv")
write.csv(by_province,"province_bar.csv")
write.csv(top_metal,"top_metal.csv")
write.csv(by_province,"province_bar.csv")
write.csv(state_max,"top_metal.csv")
state_id <- read.csv("state_id.csv")
View(state_id)
View(state_max)
state_max %>%
merge(state_id,by.x = state , by.y = state_id$state)
state_max %>%
group_by(state)
state_max %>%
merge(state_id,by.x = state_max$state , by.y = state_id$state)
merge(state_max,state_id,by.x = state_max$state , by.y = state_id$state)
merge(state_max,state_id,by = state)
View(state_id)
View(state_max)
merge(state_max,state_id,by = "state")
by_province <- ores %>%
group_by(state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
state_max <- merge(state_max,state_id,by = "state")
state_max <- state_max[,1:4]
View(state_max)
by_province <- ores %>%
group_by(state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
View(state_max)
by_province <- ores %>%
group_by(state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
state_max <- merge(state_max,state_id,by = "state")
state_max <- state_max[,1:4]
by_province <- ores %>%
group_by(state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
state_max <- merge(state_max,state_id,by = "state", all.x = TRUE)
state_max <- state_max[,1:4]
View(state_max)
by_province <- ores %>%
group_by(state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
state_max <- merge(state_max,state_id,by = "state")
state_max <- state_max[,1:4]
state_max %>%
group_by(state)
write.csv(by_province,"province_bar.csv")
write.csv(state_max,"top_metal.csv")
View(state_max)
View(state_max)
by_province <- ores %>%
group_by(state,commod1) %>%
count()
state_max <- by_province %>%
group_by(state)%>%
filter(n == max(n))
state_max <- merge(state_max,state_id,by = "state")
state_max <- state_max[,1:4]
state_max <- state_max %>%
filter(id != 72)
View(state_id)
View(state_max)
write.csv(by_province,"province_bar.csv")
write.csv(state_max,"top_metal.csv")
View(state_id)
library(dplyr)
library(tidyr)
library(stringr)
ores<- read.csv("mineral-ores.csv")
ores <- ores %>%
filter(country == "United States")
ores <- ores %>%
filter(com_type == "M")
ores <-ores %>%
mutate(commod1 = strsplit(as.character(commod1),",")) %>%
unnest(commod1)
ores <- ores %>%
mutate(state = strsplit(as.character(state),",")) %>%
unnest(state)
ores <- ores %>%
mutate(state = str_trim(state))
ores <- ores %>%
mutate(commod1 = str_trim(commod1)) %>%
filter(commod1 != "Construction")
View(ores)
write.csv(by_province,"province_bar.csv")
write.csv(state_max,"top_metal.csv")
write.csv(ores[,c(1,2,3,6,7,9,16)],"ores_short.csv")
ores %>%
group_by(state) %>%
count()
ores %>%
group_by(state) %>%
group_walk(~ write.csv(.x, file = file.path(temp, paste0(.y$state, ".csv"))))
dir.create(temp <- tempfile())
ores %>%
group_by(state) %>%
group_walk(~ write.csv(.x, file = file.path(temp, paste0(.y$state, ".csv"))))
list.files(temp, pattern = "csv$")
dir.create(temp <- tempfile())
ores %>%
group_by(state) %>%
group_walk(~ write.csv(.x, paste0(.y$state, ".csv")))
list.files(temp, pattern = "csv$")
dir.create(temp <- tempfile())
ores %>%
group_by(state) %>%
group_walk(~ write.csv(.x, paste0("state_deposits/",.y$state, ".csv")))
list.files(temp, pattern = "csv$")
write.csv(by_province,"province_bar.csv")
write.csv(state_max,"top_metal.csv")
write.csv(ores[,c(1,2,3,6,7,9,16)],"ores_short.csv")
dir.create(temp <- tempfile())
ores %>%
group_by(state) %>%
group_walk(~ write.csv(.x, paste0("state_deposits/",.y$state, ".csv")))
list.files(temp, pattern = "csv$")
